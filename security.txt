1. Kubernetes Security Primitives

Controlling access to api-server

Who can access? 
Files - Username and Passwords
Files - Username and Tokens
Certificates
External Authentication providers - LDAP
Service Accounts

What can they do?
RBAC Authorization
ABAC Authorization
Node Authorization
Webhook Mode



All communication in cluster b/w the various components, such as etcd cluster, kube controller manager, scheduler, kubelet
is secured using TLS encryption.

What about communication between the applications within the cluster?

By default all the pods can access all other pods within the cluster. You can restrict using network policies.





AUTHENTICATION

Multiple nodes, multiple parts, users like admins, developers then we have 3rd party applications and end users.

Securing access to cluster using authentication mechanisms

Security of end users who access the applications deployed on cluster is managed by applications internally.

Our focus is on 

Users: Admins and Developers
Service accounts: 3rd party apps

Kubernetes doesn't manage user accounts natively. It relies on external source like file with user details, ldap, certificates etc.

So you can't manage users and see the list of users.

Security Accounts? Yes it can 


____________________________________________________


For now we will focus on Users i.e Admins using kubectl commands and Developers using curl https://kube-server-ip:6443/

All these requests goes to kube-api server.
Kube-api server authenticates the requests before processing it.

How does it authenticate?

1. Static Password file
2. Static token file
3. Certificates
4. Identity Services


Static Password files
a csv file with 3 coloumns: passwd, username and user id

we pass the file name to api server

in kube-apuserver.service add:
--basic-auth-file=user-details.csv
and restart


If you are setting it up using kubeadm you must edit kube-apiserver.yaml file.
Kubeadm will automatically restart api-server once you update the file.

To authenticate using basic credentials while accessing the api-server

curl -v -k https://master-node-ip:6443/api/v1/pods -u "user1:password123"

In csv file we can have 4th coloumn with group details. It is used to assign users to specific groups.




 
Static token file
Token | USER | USERID | GROUP

--token-auth-file=user-token-details.csv

curl -v -k https://master-node-ip:6443/api/v1/pods --header "Authorization: Bearer KpjCVbI7rCFAsncjcw"

This static file way is not recommended.
Consider volume mount while providing the auth file in a kubeadm setup 
Setup Role Based Authorization for new users.




TLS Certificates
Goals: What are TLS Certificates?
How does Kubernetes use Certificates?
How to generate them?
How to configure then?
How to view them?
How to troublesoot issues related to Certificates?



Basics of certificates:

TLS Certificates:

A certificate is used to create trust between two parties.

User and server

User --> Online banking application

Hackers can retrive the creds sent in simple text format.Not safe!

Encryption using keys.
We add random numbers and alphabets and encrypt it in a format that cannot be recognized.
The data is sent to server.Server decrypt using keys.

But key has to be sent to the server over internet. Hacker can sniff the key sent.

Single key: Symmetric encryption


Asymmetric encryption: Pair of keys: private and public keys.


Encrypt the data with public key (this can be shared)
Decrypt using private key.


User -------------------------------------> Server
ssh-keygen                                  cat ~/.ssh/authorized_keys
id_rsa id_rsa.pub(public lock)

Now you block all the access to the server accept using the public lock.

Now lock is public any one can break through. But it can only be opened using Private key.

ssh -i id_rsa user1@server1



How do you secure more than 1 server? 
create copies of public lock and use on as many servers as you want.
Can use same ssh.

Other users need access?
Crate another doors to put locks on.
copy there public lock under /.ssh/authorized_keys



Now let us come back to our bank server example

To securely transfer the 'symmetric key' [which encrypts data] from the client to the server
we use assymetric encryption.

We create public lock and private key on the server.

On server
openssl genrsa -out mybank.key 1024
openssl rs -in my-bank.key -pubout > mybank.pem

ls
my-bank.key mybank.key


Now assume 

hacker(gets the public lock from the server)                                   
user(gets the public lock from the server)                                        server


Users browser encrypts the symmetric key with the public key sent by the server to it.
Now the hacker can't break [decrypt] the symmetric key if user send it to the server because the private key is just with the server.

So user first encrypts the data with symmetric key and then that symmetric key is encrypted using a public key which is given by the server to it.
and then it sends it to the server.

Server uses the private key to decrypt the public key and retrives the symmetric key.


Now hacker will try other things!

Hacker builds a similar website like your bank website
He generates his own set of public and private keys.
tweaks the network to get your request on his page.
You send the request, you take hackers public key to encrypt your symmetric key with it and send it to the hacker created website.

HACKED!!

What if there was a way you can check if the key public key sent by the server is authentic or not?

It sends a certificate and public key in it 
all the names the bank wants to be refered by should be mentioned in alternative name section of the certificate.

But now what if Hacker creates his own certificate?

how to know it is legitimate

Who signed and issued the certificate?

Self signed [NOT SAFE]

Certification Authority:
Symantec, digicert, globalsign etc

You generate Certificate Signing Request using a key you generated earlier and domain name:


ON SERVER:
openssl req -new -key my-bank.key -out my-bank.csr
  -subj "/C=US/ST=CA/O=MyOrg,Inc./CN=mydomain.com"

ls 
my-bank.key my-bank.csr

now you send this request to CA and you get back a signed Certificate

HACKER will fail during validation at CA. CA make sure you are the owner of that domain.

How do browsers know if CA was fake or valid one??

say by someone who says they are symantec but are not.

CA themselves have there private key and public key.
CA use private key to sign the certificate
Browsers have public key of all the CAs builtin

The browser uses the public of the CA to validate the CA [that the certificate signed is by a valid CA]
They have it under trusted root certification authorities.

These help us with public websites

but cant be useful for internal private CA.

Private CA server internally deploy.
Public key of CA deployed on all employees browser.





Public Key Infrastructure

Summary of this:
We have seen why we will want to encrypt the messages being sent over a network.

To encrypt message we use asymmetric encryption with a pair of private and public keys.

Admin uses pair of private and public key to encrypt ssh connectivity to the server.

The server uses a pair of private and public key to encrypt HTTPS traffic but for this server further sents certificate sigining request to a CA, 
The CA uses its private key to sign the CSR [remember all users have copy of CA public key]
The signed certificate is sent back the to the server. Server configures the web-app with the signed certificate.

Whenever a user access the web-app the server first sends the certificate with its public key.
The users browser reads the certificate and uses CA's public key to validate and retrives the servers public key.
It then generates a symmetric key which will be used for all further communication.
The symmetric key is encrypted using servers public key and send to the server.
Server uses its private key to decrypt and retrive the symmetric key.
Once the user establishes trust with the website it uses username and password.


But one thing to notice is the server doesn't know the client is who say they are.
It can be hacker having theft creds of a user.

What can the server do?
Server can reqeust a certificate from the client.
Client will have to generate the keys and a signed certificate from a valid CA
Client sends the certificate to server to assure the server.

TLS client servers are generally under the hood if they are.

It is not fixed out of private key and public key which encrypts the data.
The rule is which ever encrypts cannot decrypt.

Generally:

Certificates with Public Key 
*.crt or *.pem

server.crt
server.pem
client.crt
client.pem


Certificate with Private key
*.key or *-key.pem

server.key
server-key.pem
client.key
client-key.pem






TLS in kubernetes

Securing Kubernetes using TLS certificates
Server Certificates on servers
Client certificates
root certificates on ca servers



Now k8s cluster have master and worker nodes

Communication b/w these should be encrypted

admin working with controlplane and api servers and further api server with other parts needs to be secured. 

1. all various services in cluster to use server certificates
2. all clients to use client certificates.




Let us start with kube-api server

API server exposes an HTTPS service that other components, as well as external users use to manage the k8s cluster.
So it is a server and requires certificates to secure communication with clients.

apiserver.cert and apiserver.key 
these names can differ

Anything with .crt extention is the certificate and .key extension is the private key

Etcd server   etcdserver.crt etcdserver.key

kubelet server  kubelet.crt  kubelet.key
exposes an https api endpoint


Now let us look at client components.

It is admins who access the kube-api server through kubectl rest api


Admin [admin.crt admin.key] --> kubectl rest api --> kube-api server

The scheduler talks to the kube-apiserver to look for pods that require scheduling and then get the api server to schedule the pods on the right worker nodes.

The scheduler is a client that accesses the kube-apiserver
So scheduler needs to validate its identity using a client certificate scheduler.crt and scheduler.key

The kube controller manager is another client to kube-api server
same is for kube-proxy


Kube-api server is the only one talking to etcd server
and it acts as a client to it. So either it can use same cert and key or it can generate a new one to communicate to etcd

kube-api server also talks to each of the kubelet server on each node that is how it monitors the worker nodes.


Too many certificates
client certificates
server certificates

How to generate all these certificates?
We need a CA 

and k8s requires you to have atleast 1 CA for your cluster, you can have more.
You can have more than 1 

say 1 for all the components in cluster and another 1 for etcd.

For now we will stick to 1
CA have its own pair of certificate and key.
CA.crt CA.key







To generate certificates there are many tools available like Easyrsa, openssl, cfssl


We will start with CA certificates

Generate keys
openssl genrsa -out ca.key 2048
ca.key

Certified signing request
openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr
ca.csr

sign signatures
openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt
ca.crt

It is self-signed by the CA using its own private key that it generated in the first step.



Admin user

generate keys
openssl genrsa -out admin.key 2048
admin.key

CSR
openssl req -new -key admin.key -subj \ 
       "/CN=kube-admin" -out admin.csr               It doesn't really have to be kube-admin

admin.csr

Sign Certificate
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out ad

admin.ca

This time we specify CA certificate and CA key
We are sigining our certificate with the CA key pair
That makes it a valid certificate in the cluster

This is the certificate admin will use to authenticate to k8s cluster.


The user account needs to be identified as an admin user and not just as a general user.
You do that by addming group name in certificate

In this case, a group named system masters exists on k8s with admin privileges


We now have admin cert with admin priv.



Same for client certificates.

Now kube-scheduler is part of control plane so its name must be prefixed with keyword system
SYSTEM KUBE-SCHEDULER

same for controller manager and kube proxy




What do you do with certificates?

example admin certificacte?


curl https://kube-apiserver:6443/api/v1/pods \ 
 --key admin.key --cert admin.crt
 --cacert.crt



The signed certificate is then output



OR Kube-config have all these added 



They all need public certificate copy of CA root



Server Side certificate

ETCD servers
can be deployed on diff servers as a cluster

we must generate additional certificates for peers 
Once the certificates are generated specify them while starting the ETCD server
there are key and cert file options.

There are other options available for specifying the peer certificates

It requires the CA root certificate that verify client connecting to ETCD server are valid



API SERVER

Famous guy!

Kube api-server

kubernetes.default.svc.cluster.local
ip of host or pod running it

all the names that are given to api-server must be present in the certificate generated for it.

openssl gensra -out apiserver.key 22048
apiserver 

openssl req -new -key apiserver.key -subj \ "/CN=kube-apiserver" -out apiserver.csr
apiserver.csr


How do you specify all the alternative names?
you must create openssl config file

openssl.cnf 

add all the names in subjectAltName section

now while creating the csr

openssl req -new -key apiserver.key -subj \
 "/CN=kube-apiserver" -out apiserver.csr -config openssl.cnf

Finally sign the certificate with CA certificate and key



Now the location of these certificates is passed in Kube API servers executable or service configuration.

First ca file needs to be passed in as every componenet needs the CA certificate to verify its clients.

Then we provide the API server certificates under the TLS cert options.

We then specify the client certificates used  by kube-api server to connect with ETCD server with the CA file.

Finally kube-api client cert for kubelets.



Kubelet server running on each worker node to manage the node.

That is what the api server talks to
To monitor the node and send info what pods to schedule on the node.

Therefore you need cert and key pair for each node.
node01 node02 node03

specify them in kubelet-config.yaml
first ca certificate 
then provide kubelet node certificate for each node.


kubelet needs client certificate to talk to api-server.

api server needs to know which node is authenticated and what permissions are needed.
It requires nodes to have right names and proper format

system node nodename

nodes must be added to group name system nodes for right permissions.






View Certificate Details:


You are asked to perform a health check of all the certificates in the entire cluster


 there are different ways a cluster is setup and certificates setup also differes accordingly.


The hard way!  
cat /etc/systemd/system/kube-apiserver.service

If you are deploying k8s cluster by scratch you generate all teh certificates by yourself.

Or else  you use kubeadm 
it automatically generating and configuring the cluster for you.
kubeadm deploys these as pods

cat /etc/kubernetes/manifests/kube-apiserver.yaml 
In this command section have all the list of certificates
command 

Take each certificate and look inside to find more about it.

for api-server:

openssl x509 -in /etc/kubernetes/pki/apiserver.crt -t

This will decode the cert

Start from section
Subject

then check
Subject Alternative Name: It should include all

Then check the validity section
and then check issuer of the certificate [CA]

follow same procedure for checking all other 



When you run into issues you should first inspect logs
If you setup cluster from scratch  and services are configured as native services in the os.

Inspect service logs
journalctl -u etcd.service -l




If using kubeadm

kubectl logs etcd-master

If say core components etcd or api-server are down.

You have to go one level down and check logs using docker

docker ps -a     from here get the container_id
docker logs container_id





_________________________________________

How to manage certificates and certificate api

We setup
CA servers and certificates 

I have admin cert and key

Another admin comes.
Creates a private key and csr and sends me the csr 

I get it signed by CA server private key and root certificate.

And i send the certificate back to new 


Certificate Expires

again the same process


What is CA?
It is just the pair of key and the certificate files we have generated.
These files needs to be protected
Super safe

As of now CA is on master node

Kubeadm do the same

Right now csr is done manualy
we need automation

Through an api call

K8s api object
1. Create CertificateSigningRequest Object
2. Review request
3. Approve Requests
4. Share Certs to users



User creates a key
openssl genrsa -out jane.key 2048
jane.key

openssl req -new -key jane.key -subj "/CN=jane" -out jane.csr
jane.csr


now admin creates a CertificateSigningRequest object
jane-csr.yaml
apiVersion:
kind:
metadata:
   name: jane
spec:
  groups:
  - system:authenticated
  usages:
  - digital signature
  - key encipherment
  - server auth
  request:
      base64 encoded csr text file here

kubectl get csr

kubectl certificate approve jane
jane approved!

Kubernetes signs the certificate using the CA key pairs and generates the certificate for the user


kubectl get csr jane -o yaml


echo "LS0...." | base64 --decoded


Who does all of this for us?

Controller manager handles this!!
CSR-Approving  CSR Signing



cat /etc/kubernetes/manifests/kube-controller-manager.yaml

spec:
  containers:
  - command:
    - kube-controller-manager
    - --address=127.0.0.1
    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key







KubeConfig

say my cluster is called my-kube-playground

curl https://my-kube-playground:6443/api/v1/pods \
 --key admin.key
 --cert admin.crt
 --cacert ca.crt

Validated by apiserver to authenticate the user

kubectl get pods 
    --server my-kube-playground:6443
    --client-key admin.key
    --certificate-authority

better option:

$HOME/.kube.config

kubectl get pods
 
